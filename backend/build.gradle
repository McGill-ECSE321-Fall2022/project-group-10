plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'

	// Code coverage
	id 'jacoco'

	// Code style
	id 'com.diffplug.spotless' version '6.11.0'

	// Node plugin (used to run newman (postman caller))
	id "com.github.node-gradle.node" version "3.5.0"
}

node {
	download = true
}

task installNewman(type: NpmTask) {
	args = ['install', 'newman', '--save-dev']
}

// Needs to run in parallel with bootRun
task postman(type: NpxTask) {
	dependsOn installNewman
	command = 'newman'
	args = [
			'run',
			'--bail', 'true',
			"src/test/resources/postman/Integration_Tests_All.postman_collection.json"
	]
}

group = 'ca.mcgill.ecse321'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
	google()
	mavenLocal()
}

dependencies {
	// Spring dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'

	// Needed for Postgres
	runtimeOnly 'org.postgresql:postgresql'

	// For Swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

	// For Mockito
	testImplementation 'org.mockito:mockito-core:4.8.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	testLogging {
		events "PASSED", "SKIPPED", "FAILED"
	}

	// Run code coverage report after testing
	finalizedBy jacocoTestReport
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, includes : [
					"ca/mcgill/ecse321/museum/service/*"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, includes : [
					"ca/mcgill/ecse321/museum/service/*"
			])
		}))
	}

	// Enforce a minimum of 70% instruction coverage
	violationRules {
		rule {
			limit {
				minimum = 0.7
			}
		}
	}
}

// Enforce a coding style
spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.15.0').aosp().reflowLongStrings()
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeader '/* (C)$YEAR */'
	}
}
